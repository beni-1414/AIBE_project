library(DMRcate)
library(stringr)
# get the 450k annotation data
ann450k = getAnnotation(IlluminaHumanMethylation450kanno.ilmn12.hg19)
head(ann450k)
# read in the sample sheet for the experiment
targets <- read.metharray.sheet(dataDirectory, pattern="SampleSheet.csv")
# read in the raw data from the IDAT files
rgSet <- read.metharray.exp(targets=targets)
rgSet
# give the samples descriptive names
targets$ID <- paste(targets$Sample_Group,targets$Sample_Name,sep=".")
sampleNames(rgSet) <- targets$ID
rgSet
# calculate the detection p-values
detP <- detectionP(rgSet)
head(detP)
# examine mean detection p-values across all samples to identify any failed samples
pal <- brewer.pal(8,"Dark2")
par(mfrow=c(1,2))
barplot(colMeans(detP), col=pal[factor(targets$Sample_Group)], las=2,
cex.names=0.8,ylab="Mean detection p-values")
abline(h=0.01,col="red")
legend("topleft", legend=levels(factor(targets$Sample_Group)), fill=pal,
bg="white")
barplot(colMeans(detP), col=pal[factor(targets$Sample_Group)], las=2,
cex.names=0.8, ylim = c(0,0.002), ylab="Mean detection p-values")
legend("topleft", legend=levels(factor(targets$Sample_Group)), fill=pal,
bg="white")
qcReport(rgSet, sampNames=targets$ID, sampGroups=targets$Sample_Group,
pdf="qcReport.pdf")
# remove poor quality samples
keep <- colMeans(detP) < 0.05
print(keep)
rgSet <- rgSet[,keep]
rgSet
# remove poor quality samples from targets data
targets <- targets[keep,]
targets[,1:5]
# remove poor quality samples from detection p-value table
detP <- detP[,keep]
dim(detP)
# normalize the data; this results in a GenomicRatioSet object
mSetSq <- preprocessQuantile(rgSet)
# create a MethylSet object from the raw data for plotting
mSetRaw <- preprocessRaw(rgSet)
# visualise what the data looks like before and after normalisation
par(mfrow=c(1,2))
densityPlot(rgSet, sampGroups=targets$Sample_Group,main="Raw", legend=FALSE)
legend("top", legend = levels(factor(targets$Sample_Group)),
text.col=brewer.pal(8,"Dark2"))
densityPlot(getBeta(mSetSq), sampGroups=targets$Sample_Group,
main="Normalized", legend=FALSE)
legend("top", legend = levels(factor(targets$Sample_Group)),
text.col=brewer.pal(8,"Dark2"))
noobSetSq = preprocessNoob(rgSet, offset = 100, dyeCorr = TRUE, verbose = TRUE)
noobSetSq
# MDS plots to look at largest sources of variation
par(mfrow=c(1,2))
plotMDS(getM(mSetSq), top=1000, gene.selection="common",
col=pal[factor(targets$Sample_Group)])
legend("top", legend=levels(factor(targets$Sample_Group)), text.col=pal,
bg="white", cex=0.7)
plotMDS(getM(mSetSq), top=1000, gene.selection="common",
col=pal[factor(targets$Sample_Source)])
legend("top", legend=levels(factor(targets$Sample_Source)), text.col=pal,
bg="white", cex=0.7)
# Examine higher dimensions to look at other sources of variation
par(mfrow=c(1,3))
plotMDS(getM(mSetSq), top=1000, gene.selection="common",
col=pal[factor(targets$Sample_Group)], dim=c(1,3))
legend("top", legend=levels(factor(targets$Sample_Group)), text.col=pal,
cex=0.7, bg="white")
plotMDS(getM(mSetSq), top=1000, gene.selection="common",
col=pal[factor(targets$Sample_Group)], dim=c(2,3))
legend("topleft", legend=levels(factor(targets$Sample_Group)), text.col=pal,
cex=0.7, bg="white")
plotMDS(getM(mSetSq), top=1000, gene.selection="common",
col=pal[factor(targets$Sample_Group)], dim=c(3,4))
legend("topright", legend=levels(factor(targets$Sample_Group)), text.col=pal,
cex=0.7, bg="white")
# ensure probes are in the same order in the mSetSq and detP objects
detP <- detP[match(featureNames(mSetSq),rownames(detP)),]
# remove any probes that have failed in one or more samples
keep <- rowSums(detP < 0.01) == ncol(mSetSq)
table(keep)
mSetSqFlt <- mSetSq[keep,]
mSetSqFlt
# if your data includes males and females, remove probes on the sex chromosomes
keep <- !(featureNames(mSetSqFlt) %in% ann450k$Name[ann450k$chr %in%
c("chrX","chrY")])
table(keep)
mSetSqFlt <- mSetSqFlt[keep,]
mSetSqFlt
# remove probes with SNPs at CpG site
mSetSqFlt <- dropLociWithSnps(mSetSqFlt)
mSetSqFlt
# exclude cross reactive probes
xReactiveProbes <- read.csv(file=paste(dataDirectory,
"48639-non-specific-probes-Illumina450k.csv",
sep="/"), stringsAsFactors=FALSE)
keep <- !(featureNames(mSetSqFlt) %in% xReactiveProbes$TargetID)
table(keep)
mSetSqFlt <- mSetSqFlt[keep,]
mSetSqFlt
par(mfrow=c(1,2))
plotMDS(getM(mSetSqFlt), top=1000, gene.selection="common",
col=pal[factor(targets$Sample_Group)], cex=0.8)
legend("right", legend=levels(factor(targets$Sample_Group)), text.col=pal,
cex=0.65, bg="white")
plotMDS(getM(mSetSqFlt), top=1000, gene.selection="common",
col=pal[factor(targets$Sample_Source)])
legend("right", legend=levels(factor(targets$Sample_Source)), text.col=pal,
cex=0.7, bg="white")
par(mfrow=c(1,3))
# Examine higher dimensions to look at other sources of variation
plotMDS(getM(mSetSqFlt), top=1000, gene.selection="common",
col=pal[factor(targets$Sample_Source)], dim=c(1,3))
legend("right", legend=levels(factor(targets$Sample_Source)), text.col=pal,
cex=0.7, bg="white")
plotMDS(getM(mSetSqFlt), top=1000, gene.selection="common",
col=pal[factor(targets$Sample_Source)], dim=c(2,3))
legend("topright", legend=levels(factor(targets$Sample_Source)), text.col=pal,
cex=0.7, bg="white")
plotMDS(getM(mSetSqFlt), top=1000, gene.selection="common",
col=pal[factor(targets$Sample_Source)], dim=c(3,4))
legend("right", legend=levels(factor(targets$Sample_Source)), text.col=pal,
cex=0.7, bg="white")
# calculate M-values for statistical analysis
mVals <- getM(mSetSqFlt)
head(mVals[,1:5])
bVals <- getBeta(mSetSqFlt)
head(bVals[,1:5])
par(mfrow=c(1,2))
densityPlot(bVals, sampGroups=targets$Sample_Group, main="Beta values",
legend=FALSE, xlab="Beta values")
legend("top", legend = levels(factor(targets$Sample_Group)),
text.col=brewer.pal(8,"Dark2"))
densityPlot(mVals, sampGroups=targets$Sample_Group, main="M-values",
legend=FALSE, xlab="M values")
legend("topleft", legend = levels(factor(targets$Sample_Group)),
text.col=brewer.pal(8,"Dark2"))
par(mfrow=c(1,2))
densityPlot(rgSet, sampGroups=targets$Sample_Group,main="Raw", legend=FALSE)
legend("top", legend = levels(factor(targets$Sample_Group)),
text.col=brewer.pal(8,"Dark2"))
densityPlot(getBeta(noobSetSq), sampGroups=targets$Sample_Group,
main="Normalized", legend=FALSE)
legend("top", legend = levels(factor(targets$Sample_Group)),
text.col=brewer.pal(8,"Dark2"))
knitr::opts_chunk$set(echo = TRUE)
cd = getwd()
# set up a path to the data directory
dataDirectory <- file.path(cd, "data")
# list the files
list.files(dataDirectory, recursive=TRUE)
dir.create("output", recursive = T)
dir_output = "output"
dir.create(dir_output, recursive = T)
options(repos = structure(c(CRAN = "https://cran.rediris.es/")))
# load packages required for analysis
library(limma)
library(minfi)
library(IlluminaHumanMethylation450kanno.ilmn12.hg19)
library(IlluminaHumanMethylation450kmanifest)
library(RColorBrewer)
library(missMethyl)
library(matrixStats)
library(minfiData)
library(Gviz)
library(DMRcate)
library(stringr)
# get the 450k annotation data
ann450k = getAnnotation(IlluminaHumanMethylation450kanno.ilmn12.hg19)
head(ann450k)
# read in the sample sheet for the experiment
targets <- read.metharray.sheet(dataDirectory, pattern="SampleSheet.csv")
# read in the raw data from the IDAT files
rgSet <- read.metharray.exp(targets=targets)
rgSet
View(targets)
# give the samples descriptive names
targets$ID <- paste(targets$Sample_Group,targets$Sample_Name,sep=".")
sampleNames(rgSet) <- targets$ID
rgSet
# calculate the detection p-values
detP <- detectionP(rgSet)
head(detP)
# examine mean detection p-values across all samples to identify any failed samples
pal <- brewer.pal(8,"Dark2")
par(mfrow=c(1,2))
barplot(colMeans(detP), col=pal[factor(targets$Sample_Group)], las=2,
cex.names=0.8,ylab="Mean detection p-values")
abline(h=0.01,col="red")
legend("topleft", legend=levels(factor(targets$Sample_Group)), fill=pal,
bg="white")
barplot(colMeans(detP), col=pal[factor(targets$Sample_Group)], las=2,
cex.names=0.8, ylim = c(0,0.002), ylab="Mean detection p-values")
legend("topleft", legend=levels(factor(targets$Sample_Group)), fill=pal,
bg="white")
pdf(file = file.path(dir_output,paste0("DataPreprocessing","_","QC_detection_pvalues.pdf")), height = 3, width = 5)
barplot(colMeans(detP), col=pal[factor(targets$Sample_Group)], las=2,
cex.names=0.8,ylab="Mean detection p-values")
abline(h=0.01,col="red")
legend("topleft", legend=levels(factor(targets$Sample_Group)), fill=pal,
bg="white")
barplot(colMeans(detP), col=pal[factor(targets$Sample_Group)], las=2,
cex.names=0.8, ylim = c(0,0.002), ylab="Mean detection p-values")
legend("topleft", legend=levels(factor(targets$Sample_Group)), fill=pal,
bg="white")
dev.off()
pdf(file = file.path(dir_output,paste0("DataPreprocessing","_","QC_detection_pvalues.pdf")), height = 3, width = 7)
barplot(colMeans(detP), col=pal[factor(targets$Sample_Group)], las=2,
cex.names=0.8,ylab="Mean detection p-values")
abline(h=0.01,col="red")
legend("topleft", legend=levels(factor(targets$Sample_Group)), fill=pal,
bg="white")
barplot(colMeans(detP), col=pal[factor(targets$Sample_Group)], las=2,
cex.names=0.8, ylim = c(0,0.002), ylab="Mean detection p-values")
legend("topleft", legend=levels(factor(targets$Sample_Group)), fill=pal,
bg="white")
dev.off()
qcReport(rgSet, sampNames=targets$ID, sampGroups=targets$Sample_Group,
pdf="qcReport.pdf")
# remove poor quality samples
keep <- colMeans(detP) < 0.05
print(keep)
rgSet <- rgSet[,keep]
rgSet
# remove poor quality samples from targets data
targets <- targets[keep,]
targets[,1:5]
# remove poor quality samples from detection p-value table
detP <- detP[,keep]
dim(detP)
# normalize the data; this results in a GenomicRatioSet object
mSetSq <- preprocessQuantile(rgSet)
# create a MethylSet object from the raw data for plotting
mSetRaw <- preprocessRaw(rgSet)
# visualise what the data looks like before and after normalisation
par(mfrow=c(1,2))
densityPlot(rgSet, sampGroups=targets$Sample_Group,main="Raw", legend=FALSE)
legend("top", legend = levels(factor(targets$Sample_Group)),
text.col=brewer.pal(8,"Dark2"))
densityPlot(getBeta(mSetSq), sampGroups=targets$Sample_Group,
main="Normalized", legend=FALSE)
legend("top", legend = levels(factor(targets$Sample_Group)),
text.col=brewer.pal(8,"Dark2"))
qcraw = getQC(mSetRaw)
View(qcraw)
plot(qcraw$mMed,qcraw$uMed, pch = 19)
rownames(qcraw)
plot(qcraw$mMed,qcraw$uMed, pch = 19)
text(qcraw$mMed,qcraw$uMed, labels=rownames(qcraw), cex= 0.7, pos = 4)
boxplot(getMeth(mSetRaw), outline = F, las=2, cex = 0.5)
boxplot(getUnmeth(mSetRaw), outline = F, las=2, cex = 0.5)
noobSetSq = preprocessNoob(rgSet, offset = 100, dyeCorr = TRUE, verbose = TRUE)
noobSetSq
par(mfrow=c(1,2))
densityPlot(rgSet, sampGroups=targets$Sample_Group,main="Raw", legend=FALSE)
legend("top", legend = levels(factor(targets$Sample_Group)),
text.col=brewer.pal(8,"Dark2"))
densityPlot(getBeta(noobSetSq), sampGroups=targets$Sample_Group,
main="Normalized", legend=FALSE)
legend("top", legend = levels(factor(targets$Sample_Group)),
text.col=brewer.pal(8,"Dark2"))
# MDS plots to look at largest sources of variation
par(mfrow=c(1,2))
plotMDS(getM(mSetSq), top=1000, gene.selection="common",
col=pal[factor(targets$Sample_Group)])
legend("top", legend=levels(factor(targets$Sample_Group)), text.col=pal,
bg="white", cex=0.7)
plotMDS(getM(mSetSq), top=1000, gene.selection="common",
col=pal[factor(targets$Sample_Source)])
legend("top", legend=levels(factor(targets$Sample_Source)), text.col=pal,
bg="white", cex=0.7)
snp.probes.illumina <- getSnpBeta(rgSet)
head(snp.probes.illumina)
View(rgSet)
View(snp.probes.illumina)
pheatmap(snp.probes.illumina, main = "Sample tracking SNP probes", border_color = "white", fontsize = 4, show_colnames = T, show_rownames = T)
library(pheatmap)
pheatmap(snp.probes.illumina, main = "Sample tracking SNP probes", border_color = "white", fontsize = 4, show_colnames = T, show_rownames = T)
pheatmap(snp.probes.illumina, main = "Sample tracking SNP probes", border_color = "white", fontsize = 4, show_colnames = T, show_rownames = T)
autoplot(prcomp(t(snp.probes.illumina)), label = T, main = "Sample tracking SNP probes")
?autoplot
library(ggplot2)
autoplot(prcomp(t(snp.probes.illumina)), label = T, main = "Sample tracking SNP probes")
?prcomp
library(ggplot2)
library(stats)
autoplot(prcomp(t(snp.probes.illumina)), label = T, main = "Sample tracking SNP probes")
library(RColorBrewer)
library(pheatmap)
library(ggplot2)
library(ggfortify)
library(RColorBrewer)
library(pheatmap)
library(ggplot2)
library(stringr)
library(gridExtra)
library(grid)
library(readxl)
library(patchwork)
library(qs)
library(RColorBrewer)
library(pheatmap)
library(ggplot2)
library(stringr)
library(gridExtra)
library(grid)
library(readxl)
library(patchwork)
library(data.table)
library(minfi)
library(sesame)
library(RColorBrewer)
library(pheatmap)
library(ggplot2)
library(stringr)
library(gridExtra)
library(grid)
library(readxl)
library(patchwork)
library(data.table)
library(minfi)
library(ggplot2)
library(stats)
autoplot(prcomp(t(snp.probes.illumina)), label = T, main = "Sample tracking SNP probes")
# exclude cross reactive probes
xReactiveProbes <- read.csv(file=paste(dataDirectory,
"48639-non-specific-probes-Illumina450k.csv",
sep="/"), stringsAsFactors=FALSE)
keep <- !(featureNames(mSetSqFlt) %in% xReactiveProbes$TargetID)
# remove probes with SNPs at CpG site
mSetSqFlt <- dropLociWithSnps(mSetSqFlt)
# ensure probes are in the same order in the mSetSq and detP objects
detP <- detP[match(featureNames(mSetSq),rownames(detP)),]
# remove any probes that have failed in one or more samples
keep <- rowSums(detP < 0.01) == ncol(mSetSq)
table(keep)
mSetSqFlt <- mSetSq[keep,]
mSetSqFlt
# if your data includes males and females, remove probes on the sex chromosomes
keep <- !(featureNames(mSetSqFlt) %in% ann450k$Name[ann450k$chr %in%
c("chrX","chrY")])
table(keep)
mSetSqFlt <- mSetSqFlt[keep,]
mSetSqFlt
# remove probes with SNPs at CpG site
mSetSqFlt <- dropLociWithSnps(mSetSqFlt)
mSetSqFlt
snp.probes.illumina <- getSnpBeta(rgSet)
head(snp.probes.illumina)
library(pheatmap)
pheatmap(snp.probes.illumina, main = "Sample tracking SNP probes", border_color = "white", fontsize = 4, show_colnames = T, show_rownames = T)
# exclude cross reactive probes
xReactiveProbes <- read.csv(file=paste(dataDirectory,
"48639-non-specific-probes-Illumina450k.csv",
sep="/"), stringsAsFactors=FALSE)
keep <- !(featureNames(mSetSqFlt) %in% xReactiveProbes$TargetID)
table(keep)
mSetSqFlt <- mSetSqFlt[keep,]
mSetSqFlt
par(mfrow=c(1,2))
plotMDS(getM(mSetSqFlt), top=1000, gene.selection="common",
col=pal[factor(targets$Sample_Group)], cex=0.8)
legend("right", legend=levels(factor(targets$Sample_Group)), text.col=pal,
cex=0.65, bg="white")
plotMDS(getM(mSetSqFlt), top=1000, gene.selection="common",
col=pal[factor(targets$Sample_Source)])
legend("right", legend=levels(factor(targets$Sample_Source)), text.col=pal,
cex=0.7, bg="white")
par(mfrow=c(1,3))
# Examine higher dimensions to look at other sources of variation
plotMDS(getM(mSetSqFlt), top=1000, gene.selection="common",
col=pal[factor(targets$Sample_Source)], dim=c(1,3))
legend("right", legend=levels(factor(targets$Sample_Source)), text.col=pal,
cex=0.7, bg="white")
plotMDS(getM(mSetSqFlt), top=1000, gene.selection="common",
col=pal[factor(targets$Sample_Source)], dim=c(2,3))
legend("topright", legend=levels(factor(targets$Sample_Source)), text.col=pal,
cex=0.7, bg="white")
plotMDS(getM(mSetSqFlt), top=1000, gene.selection="common",
col=pal[factor(targets$Sample_Source)], dim=c(3,4))
legend("right", legend=levels(factor(targets$Sample_Source)), text.col=pal,
cex=0.7, bg="white")
# calculate M-values for statistical analysis
mVals <- getM(mSetSqFlt)
head(mVals[,1:5])
bVals <- getBeta(mSetSqFlt)
head(bVals[,1:5])
View(ann450k)
as.dataframe(View(ann450k))
view(as.dataframe(ann450k))
View(as.data.frame(ann450k))
class/mSetRaw)
class(mSetRaw)
?MethylSet
`MethylSet-class`
str(mSetRaw)
mSetRaw[[1]]
mSetRaw@assays$Meth
mSetRaw@assays$Meth
mSetRaw@assays@Meth
mSetRaw@assays[["meth"]]
getwd()
getwd()
data = read.table("heart_data.csv", header = T, sep = ",")
getwd()
setwd("C:/Users/jon/Desktop/ENG BIO/4º/2º Semestre/AI/dataset1")
data = read.table("heart_data.csv", header = T, sep = ",")
View(data)
data$BMI = data$weight / (data$height / 100)
plot(data$height, data$weight)
data$age = data$age / 365
View(data)
data = read.table("heart_data.csv", header = T, sep = ",")
data = read.table("heart_data.csv", header = T, sep = ",")
setwd("C:/Users/jon/Desktop/ENG BIO/4º/2º Semestre/AI/AIBE_project")
data = read.table("heart_data.csv", header = T, sep = ",")
data$BMI = round(data$weight / (data$height / 100), 2)
data$age = round(data$age / 365, 2)
data = data[c(-1,-2),:]
data = data[c(-1,-2),;]
data = data[c(-1,-2),]
data = read.table("heart_data.csv", header = T, sep = ",")
data$BMI = round(data$weight / (data$height / 100), 2)
data$age = round(data$age / 365, 2)
data = data[,c(-1,-2)]
boxplot(data$height)
boxplot(data$weight)
outliers_height = boxplot(data$height, plot = F)$out
boxplot(data$height, main = "HEIGHT")
boxplot(data$weight, main = "WEIGHT")
outliers_weight = boxplot(data$weight, plot = F)$out
ids_out_height = which(outliers_height == data$height,)
ids_out_weight = which(outliers_weight == data$weight,)
ids_out_height = which(outliers_height %in% data$height,)
ids_out_weight = which(outliers_weight %in% data$weight,)
common_ids <- intersect(ids_out_height, ids_out_weight)
common_ids <- union(ids_out_height, ids_out_weight)
ids_out_height == ids_out_weight[1:519]
all_ids <- union(ids_out_height, ids_out_weight)
data = data[-all_ids,]
library(dplyr)
# Calculate mean value of value_var by group_var using dplyr
result_dplyr <- data %>%
group_by(gender) %>%
summarize(mean_value = mean(data$height))
# Print the result
print(result_dplyr)
result_dplyr2 <- data %>%
group_by(gender) %>%
summarize(mean_value = mean(data$weight))
# Print the result
print(result_dplyr2)
weights_1 = data[data$gender == 1,]$weight
weights_2 = data[data$gender == 2,]$weight
sum = length(weights_1) + length(weights_2)
mean(weights_1)
mean(weights_2)
heights_1 = data[data$gender == 1,]$height
heights_2 = data[data$gender == 2,]$height
mean(heights_1)
mean(heights_2)
library(ggplot2)
library(ggplot2)
ggplot(data, aes(x = weight, y = height, color = gender)) +
geom_point() +
labs(x = "Weight", y = "Height", color = "Gender") +
theme_minimal()
library(ggplot2)
ggplot(data, aes(x = weight, y = height, color = gender)) +
geom_point() +
scale_color_manual(values = c(1 = "blue", 2 = "red"),
labels = c("Male", "Female")) +
labs(x = "Weight", y = "Height", color = "Gender") +
theme_minimal()
ggplot(data, aes(x = weight, y = height, color = gender)) +
geom_point() +
scale_color_manual(values = c("1" = "blue", "2" = "red"),
labels = c("Male", "Female")) +
labs(x = "Weight", y = "Height", color = "Gender") +
theme_minimal()
ggplot(data, aes(x = weight, y = height, color = gender)) +
geom_point() +
labs(x = "Weight", y = "Height", color = "Gender") +
theme_minimal()
data$gender <- ifelse(data$gender == 1, "F", "M")
library(ggplot2)
ggplot(data, aes(x = weight, y = height, color = gender)) +
geom_point() +
labs(x = "Weight", y = "Height", color = "Gender") +
theme_minimal()
ggplot(data, aes(x = weight, y = height, color = c("red", "blue"))) +
geom_point() +
labs(x = "Weight", y = "Height", color = "Gender") +
theme_minimal()
ggplot(data, aes(x = weight, y = height, color = c("red", "blue"))) +
geom_point() +
labs(x = "Weight", y = "Height", color = "Gender") +
theme_minimal()
ggplot(data, aes(x = weight, y = height, color = gender)) +
geom_point() +
labs(x = "Weight", y = "Height", color = "Gender") +
theme_minimal()
library(ggplot2)
ggplot(data, aes(x = weight, y = height, color = gender)) +
geom_point() +
labs(x = "Weight", y = "Height", color = "Gender") +
theme_minimal()
